int21:
	push ds
	push cs
	pop ds

	; this probably works
	mov word [tmp], bx ; cannot use stack for this
	movzx bx, ah
	shl bx, 1
	add bx, fn
	mov bx, word [bx]
	push end21 ; the proper return address
	; generated return address. should avoid any issues
	; with things like prefetch or instruction caches
	push bx
	mov bx, word [tmp]
	ret

end21:	pop ds
	iret

nul:	stc
	ret

; TODO figure out a way to format this table. maybe it can be autogenerated?
; this table is misaligned for me and im the one who made it
	;	0	1	2	3	4	5	6	7	8	9	A	B	C	D	E	F
fn:	dw	nul,	rdin_echo,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; 0
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; 1
	dw	nul,	nul,	nul,	nul,	nul,	setint,	nul,	nul,	nul,	nul,	nul,	nul,	gettime,	settime,	setverify,	nul	; 2
	dw	getver,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; 3
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	getret,	nul,	nul	; 4
	dw	nul,	nul,	nul,	nul,	setverify,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; 5
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; 6
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; 7
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; 8
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; 9
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; A
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; B
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; C
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; D
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; E
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; F

tmp: dw 0
retcode: dw 0
verify: db 0

%include "int21/0.s"
%include "int21/2.s"
%include "int21/3.s"
%include "int21/4.s"
%include "int21/5.s"

; read from CMOS register
; inputs:
; 	AL: register
; outputs:
; 	AL: value
; TODO: handle bcd here to abstract it from the kernel
rdcmos:
	cli
	cmp al, 9 ; not rtc register, do not wait. if this function bugs out
	jg .rd    ; on a century boundary thats not on me. stop using dos
	xchg al, ah
.wait:	mov al, 0xA  ; msb specifies if rtc update is in progress
	out 0x70, al ; TODO: https://wiki.osdev.org/CMOS#RTC_Update_In_Progress
	in al, 0x71
	shl al, 1
	jc .wait
	xchg al, ah
.rd:	out 0x70, al
	in al, 0x71
	sti
	ret

; write to CMOS register
; inputs:
; 	BL: value
; 	BH: register
; outputs:
; 	none
wrcmos:
	cli
	push ax
	mov al, bh
	or al, 0x80 ; nmi always on
	out 0x70, al
	mov al, bl
	out 0x71, al
	pop ax
	sti
	ret
