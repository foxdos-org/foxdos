; TODO: change to use a stack frame instead of global variables for reentrancy
int21:
	push ax
	mov ax, ds
	mov cs:[callerds], ax
	mov ax, cs
	mov ds, ax
	pop ax

	mov word [tmp], bx
	movzx bx, ah
	shl bx, 1
	add bx, fn
	mov bx, word [bx]
	push end21
	push bx

	mov bx, word [tmp]
	ret
end21:
	push ax
	mov ax, [callerds]
	mov ds, ax
	pop ax
	iret

nul:	stc
	ret

; TODO figure out a way to format this table. maybe it can be autogenerated?
; this table is misaligned for me and im the one who made it
	;	x0	x1	x2	x3	x4	x5	x6	x7	x8	x9	xA	xB	xC	xD	xE	xF
fn:	dw	nul,	rdin_echo,	wrout,	nul,	nul,	nul,	nul,	nul,	nul,	wrout_str,	nul,	nul,	nul,	nul,	nul,	nul	; 0x
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; 1x
	dw	nul,	nul,	nul,	nul,	nul,	setint,	nul,	nul,	nul,	nul,	nul,	nul,	gettime,	settime,	setverify,	nul	; 2x
	dw	getver,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; 3x
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	getret,	nul,	nul	; 4x
	dw	nul,	nul,	nul,	nul,	setverify,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; 5x
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; 6x
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; 7x
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; 8x
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; 9x
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; Ax
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; Bx
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; Cx
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; Dx
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; Ex
	dw	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul,	nul	; Fx

callerds: dw 0
tmp: dw 0
retcode: dw 0
verify: db 0

%include "int21/0.s"
%include "int21/2.s"
%include "int21/3.s"
%include "int21/4.s"
%include "int21/5.s"

; read from CMOS register
; inputs:
; 	AL: register
; outputs:
; 	AL: value
; TODO: handle bcd here to abstract it from the kernel
rdcmos:
	cli
	cmp al, 9 ; not rtc register, do not wait. if this function bugs out
	jg .rd    ; on a century boundary thats not on me. stop using dos
	xchg al, ah
.wait:	mov al, 0xA  ; msb specifies if rtc update is in progress
	out 0x70, al ; TODO: https://wiki.osdev.org/CMOS#RTC_Update_In_Progress
	in al, 0x71
	shl al, 1
	jc .wait
	xchg al, ah
.rd:	out 0x70, al
	in al, 0x71
	sti
	ret

; write to CMOS register
; inputs:
; 	BL: value
; 	BH: register
; outputs:
; 	none
wrcmos:
	cli
	push ax
	mov al, bh
	or al, 0x80 ; nmi always on
	out 0x70, al
	mov al, bl
	out 0x71, al
	pop ax
	sti
	ret
